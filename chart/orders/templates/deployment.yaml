apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}-deployment"
  labels:
    app: bluecompute
    micro: orders
    service: server
    tier: backend
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  template:
    metadata:
      labels:
        app: bluecompute
        micro: orders
        service: server
        tier: backend

    spec:
      containers:

      # Liberty Server Container
      - name: "{{ .Chart.Name }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}

        readinessProbe:
          httpGet:
            path: /orders/rest/health
            port: 9080
          initialDelaySeconds: 30
        livenessProbe:
          httpGet:
            path: /orders/rest/health
            port: 9080
          initialDelaySeconds: 1500
          timeoutSeconds: 500
        env:
          jdbcURL: "something for now"
          dbuser: root
          dbpassword: password

        env:
          - name: PORT
            value: "{{ .Values.service.servicePort }}"
          - name: APPLICATION_NAME
            value: "{{ .Release.Name }}"
          - name: GET_HOSTS_FROM
            value: dns


        resources:
          requests:
            cpu: "{{ .Values.image.resources.requests.cpu }}"
            memory: "{{ .Values.image.resources.requests.memory }}"

      # - name: "rabbitmq"
      #   image: rabbitmq
      #   imagePullPolicy: Always
      #   port: 5672
      #   port: 15672

      # Container for MySQL
      # - name: mysql
      #   image: mysql-db
      #   imagePullPolicy: IfNotPresent
      #   ports:
      #   - containerPort: {{ .Values.sql.sql_port }}
      #   command: ['sh', '-c', 'sleep 10; ./etc/init.d/mysql start; ./create_orders_db.sh {{ .Values.sql.sql_user }} {{ .Values.sql.sql_password }}']
      #   env:
      #     - name: MYSQL_ROOT_PASSWORD
      #       value: "{{ .Values.sql.sql_password }}"
      #   ExecAction:
      #     command: ['sh', '-c', './etc.init.d/mysql status']











